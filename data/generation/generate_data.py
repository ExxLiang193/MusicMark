from data.generation.models.constants import ScaleType
from data.generation.models.major_scale import MajorScale
from data.generation.models.minor_scale import MinorScale
from data.generation.models.scale_fingerings import ScaleFingerings

print("-" * 10, "MAJOR SCALES", "-" * 10)
print((scale := MajorScale.build("C#")), ScaleFingerings.build(scale), "#" * 7)
print((scale := MajorScale.build("F#")), ScaleFingerings.build(scale), "#" * 6)
print((scale := MajorScale.build("B")), ScaleFingerings.build(scale), "#" * 5)
print((scale := MajorScale.build("E")), ScaleFingerings.build(scale), "#" * 4)
print((scale := MajorScale.build("A")), ScaleFingerings.build(scale), "#" * 3)
print((scale := MajorScale.build("D")), ScaleFingerings.build(scale), "#" * 2)
print((scale := MajorScale.build("G")), ScaleFingerings.build(scale), "#" * 1)
print((scale := MajorScale.build("C")), ScaleFingerings.build(scale))
print((scale := MajorScale.build("F")), ScaleFingerings.build(scale), "b" * 1)
print((scale := MajorScale.build("Bb")), ScaleFingerings.build(scale), "b" * 2)
print((scale := MajorScale.build("Eb")), ScaleFingerings.build(scale), "b" * 3)
print((scale := MajorScale.build("Ab")), ScaleFingerings.build(scale), "b" * 4)
print((scale := MajorScale.build("Db")), ScaleFingerings.build(scale), "b" * 5)
print((scale := MajorScale.build("Gb")), ScaleFingerings.build(scale), "b" * 6)
print((scale := MajorScale.build("Cb")), ScaleFingerings.build(scale), "b" * 7)

print("-" * 10, "MINOR (NATURAL) SCALES", "-" * 10)
print((scale := MinorScale.build("A#")), ScaleFingerings.build(scale), "#" * 7)
print((scale := MinorScale.build("D#")), ScaleFingerings.build(scale), "#" * 6)
print((scale := MinorScale.build("G#")), ScaleFingerings.build(scale), "#" * 5)
print((scale := MinorScale.build("C#")), ScaleFingerings.build(scale), "#" * 4)
print((scale := MinorScale.build("F#")), ScaleFingerings.build(scale), "#" * 3)
print((scale := MinorScale.build("B")), ScaleFingerings.build(scale), "#" * 2)
print((scale := MinorScale.build("E")), ScaleFingerings.build(scale), "#" * 1)
print((scale := MinorScale.build("A")), ScaleFingerings.build(scale))
print((scale := MinorScale.build("D")), ScaleFingerings.build(scale), "b" * 1)
print((scale := MinorScale.build("G")), ScaleFingerings.build(scale), "b" * 2)
print((scale := MinorScale.build("C")), ScaleFingerings.build(scale), "b" * 3)
print((scale := MinorScale.build("F")), ScaleFingerings.build(scale), "b" * 4)
print((scale := MinorScale.build("Bb")), ScaleFingerings.build(scale), "b" * 5)
print((scale := MinorScale.build("Eb")), ScaleFingerings.build(scale), "b" * 6)
print((scale := MinorScale.build("Ab")), ScaleFingerings.build(scale), "b" * 7)

print("-" * 10, "MINOR (HARMONIC) SCALES", "-" * 10)
print((scale := MinorScale.build("A#", ScaleType.HARMONIC)), ScaleFingerings.build(scale), "#" * 7)
print((scale := MinorScale.build("D#", ScaleType.HARMONIC)), ScaleFingerings.build(scale), "#" * 6)
print((scale := MinorScale.build("G#", ScaleType.HARMONIC)), ScaleFingerings.build(scale), "#" * 5)
print((scale := MinorScale.build("C#", ScaleType.HARMONIC)), ScaleFingerings.build(scale), "#" * 4)
print((scale := MinorScale.build("F#", ScaleType.HARMONIC)), ScaleFingerings.build(scale), "#" * 3)
print((scale := MinorScale.build("B", ScaleType.HARMONIC)), ScaleFingerings.build(scale), "#" * 2)
print((scale := MinorScale.build("E", ScaleType.HARMONIC)), ScaleFingerings.build(scale), "#" * 1)
print((scale := MinorScale.build("A", ScaleType.HARMONIC)), ScaleFingerings.build(scale))
print((scale := MinorScale.build("D", ScaleType.HARMONIC)), ScaleFingerings.build(scale), "b" * 1)
print((scale := MinorScale.build("G", ScaleType.HARMONIC)), ScaleFingerings.build(scale), "b" * 2)
print((scale := MinorScale.build("C", ScaleType.HARMONIC)), ScaleFingerings.build(scale), "b" * 3)
print((scale := MinorScale.build("F", ScaleType.HARMONIC)), ScaleFingerings.build(scale), "b" * 4)
print((scale := MinorScale.build("Bb", ScaleType.HARMONIC)), ScaleFingerings.build(scale), "b" * 5)
print((scale := MinorScale.build("Eb", ScaleType.HARMONIC)), ScaleFingerings.build(scale), "b" * 6)
print((scale := MinorScale.build("Ab", ScaleType.HARMONIC)), ScaleFingerings.build(scale), "b" * 7)


print("-" * 10, "MINOR (MELODIC) SCALES", "-" * 10)
print((scale := MinorScale.build("A#", ScaleType.MELODIC)), ScaleFingerings.build(scale), "#" * 7)
print((scale := MinorScale.build("D#", ScaleType.MELODIC)), ScaleFingerings.build(scale), "#" * 6)
print((scale := MinorScale.build("G#", ScaleType.MELODIC)), ScaleFingerings.build(scale), "#" * 5)
print((scale := MinorScale.build("C#", ScaleType.MELODIC)), ScaleFingerings.build(scale), "#" * 4)
print((scale := MinorScale.build("F#", ScaleType.MELODIC)), ScaleFingerings.build(scale), "#" * 3)
print((scale := MinorScale.build("B", ScaleType.MELODIC)), ScaleFingerings.build(scale), "#" * 2)
print((scale := MinorScale.build("E", ScaleType.MELODIC)), ScaleFingerings.build(scale), "#" * 1)
print((scale := MinorScale.build("A", ScaleType.MELODIC)), ScaleFingerings.build(scale))
print((scale := MinorScale.build("D", ScaleType.MELODIC)), ScaleFingerings.build(scale), "b" * 1)
print((scale := MinorScale.build("G", ScaleType.MELODIC)), ScaleFingerings.build(scale), "b" * 2)
print((scale := MinorScale.build("C", ScaleType.MELODIC)), ScaleFingerings.build(scale), "b" * 3)
print((scale := MinorScale.build("F", ScaleType.MELODIC)), ScaleFingerings.build(scale), "b" * 4)
print((scale := MinorScale.build("Bb", ScaleType.MELODIC)), ScaleFingerings.build(scale), "b" * 5)
print((scale := MinorScale.build("Eb", ScaleType.MELODIC)), ScaleFingerings.build(scale), "b" * 6)
print((scale := MinorScale.build("Ab", ScaleType.MELODIC)), ScaleFingerings.build(scale), "b" * 7)
